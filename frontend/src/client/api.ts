/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Memory
 */
export interface Memory {
    /**
     * 
     * @type {number}
     * @memberof Memory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Memory
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Memory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Memory
     */
    'createdAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof Memory
     */
    'isPublic': boolean;
}
/**
 * 
 * @export
 * @interface MemoryRequest
 */
export interface MemoryRequest {
    /**
     * 
     * @type {number}
     * @memberof MemoryRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemoryRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemoryRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MemoryRequest
     */
    'isPublic'?: boolean;
}
/**
 * 
 * @export
 * @interface MemoryResponse
 */
export interface MemoryResponse {
    /**
     * 
     * @type {Array<Memory>}
     * @memberof MemoryResponse
     */
    'memories': Array<Memory>;
}

/**
 * MemoryApi - axios parameter creator
 * @export
 */
export const MemoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('memoriesIdDelete', 'id', id)
            const localVarPath = `/memories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesIdPut: async (id: number, memoryRequest?: MemoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('memoriesIdPut', 'id', id)
            const localVarPath = `/memories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesPost: async (memoryRequest?: MemoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemoryApi - functional programming interface
 * @export
 */
export const MemoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memoriesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memoriesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memoriesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memoriesIdPut(id: number, memoryRequest?: MemoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memoriesIdPut(id, memoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async memoriesPost(memoryRequest?: MemoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.memoriesPost(memoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemoryApi - factory interface
 * @export
 */
export const MemoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesGet(options?: any): AxiosPromise<MemoryResponse> {
            return localVarFp.memoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.memoriesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id メモリーID
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesIdPut(id: number, memoryRequest?: MemoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memoriesIdPut(id, memoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MemoryRequest} [memoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        memoriesPost(memoryRequest?: MemoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.memoriesPost(memoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemoryApi - object-oriented interface
 * @export
 * @class MemoryApi
 * @extends {BaseAPI}
 */
export class MemoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoryApi
     */
    public memoriesGet(options?: AxiosRequestConfig) {
        return MemoryApiFp(this.configuration).memoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id メモリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoryApi
     */
    public memoriesIdDelete(id: number, options?: AxiosRequestConfig) {
        return MemoryApiFp(this.configuration).memoriesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id メモリーID
     * @param {MemoryRequest} [memoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoryApi
     */
    public memoriesIdPut(id: number, memoryRequest?: MemoryRequest, options?: AxiosRequestConfig) {
        return MemoryApiFp(this.configuration).memoriesIdPut(id, memoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MemoryRequest} [memoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoryApi
     */
    public memoriesPost(memoryRequest?: MemoryRequest, options?: AxiosRequestConfig) {
        return MemoryApiFp(this.configuration).memoriesPost(memoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


